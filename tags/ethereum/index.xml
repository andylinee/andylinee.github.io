<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ethereum on Pivot the life</title>
    <link>http://localhost:1313/tags/ethereum/</link>
    <description>Recent content in Ethereum on Pivot the life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/ethereum/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What is Maximal Extractable Value (MEV)?</title>
      <link>http://localhost:1313/2024/03/03/maximal-extractable-value/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/03/03/maximal-extractable-value/</guid>
      <description>Introduction to Maximal Extractable Value (MEV) Maximal Extractable Value (MEV) is a concept that has garnered significant attention in the cryptocurrency ecosystem, particularly in the context of Ethereum. MEV refers to the maximum value that can be extracted from block production beyond standard block rewards and gas fees. It involves manipulating transaction order and execution on the blockchain to gain additional value, impacting both transaction participants and miners.&#xA;Issues caused by MEV MEV can lead to several issues:</description>
    </item>
    <item>
      <title>Understanding Receive function and Fallback function in Solidity</title>
      <link>http://localhost:1313/2024/01/25/receive-fallback-delegatecall/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/01/25/receive-fallback-delegatecall/</guid>
      <description>Solidity supports two types of callback functions, namely receive() and fallback(), primarily used for the following scenarios:&#xA;Receiving $ETH Handling function calls that do not exist in the contract Receive function: receive() receive() is a function called when a contract receives an $ETH transfer. A contract can have at most one receive() function. The declaration of receive() differs from other functions; it does not require the function keyword, cannot have any parameters, cannot return any value, and must include external and payable: receive() external payable { .</description>
    </item>
    <item>
      <title>Understanding call, staticcall and delegatecall in Solidity</title>
      <link>http://localhost:1313/2024/01/20/call-staticcall-delegatecall/</link>
      <pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/01/20/call-staticcall-delegatecall/</guid>
      <description>call, staticcall, and delegatecall are all low-level ways to call functions in another contract. They all allow adjusting the gas limit (compared to transfer and send, which have a fixed limit of 2300 gas) and do not throw exceptions when a call error occurs; instead, they return false. The main differences between these three calling methods are as follows:&#xA;call: Can call functions in other contracts (which can change the state of the called contract, the calling function cannot be view), can be used for transfers (parameter value), and can adjust gas settings.</description>
    </item>
    <item>
      <title>What is ERC20?</title>
      <link>http://localhost:1313/2024/01/15/erc20/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/01/15/erc20/</guid>
      <description>What is ERC20? ERC20 is a standard interface defined for &amp;ldquo;Fungible Tokens&amp;rdquo;, which are exchangeable tokens. It is one of the most common ERC standards used in applications such as cryptocurrencies, voting governance tokens, and staking tokens. When developers create applications on the Ethereum platform, they need to issue tokens to provide services like points and general currency. The ERC20 standard includes concepts on how to issue tokens, transfer tokens between parties, authorize third-party usage, etc.</description>
    </item>
    <item>
      <title>What is Ethereum Improvement Proposals (EIPs)?</title>
      <link>http://localhost:1313/2024/01/11/ethereum-improvement-proposals/</link>
      <pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/01/11/ethereum-improvement-proposals/</guid>
      <description>Ethereum Improvement Proposals (EIPs) Introduction to EIPs An EIP is a design document used to describe proposals, define new features or processes for Ethereum, and propose improvements. Proposal initiators submit EIPs to the Ethereum community, providing clear technical specifications and rationale, engaging in discussions, documenting different opinions or suggestions. Only after consensus is reached, the proposal content is approved.&#xA;EIPs are mainly categorized into three types:&#xA;Standard Track EIP These describe significant changes to Ethereum&amp;rsquo;s implementation, such as modifying network protocols, block or transaction verification mechanisms, or application standards.</description>
    </item>
    <item>
      <title>What is Ethereum Gas Fee?</title>
      <link>http://localhost:1313/2024/01/10/ethereum-gas-fee/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/01/10/ethereum-gas-fee/</guid>
      <description>Introduction to Gas On Ethereum, all transactions involve executing specific operations that change the state of the network, such as transferring account balances, deploying new contracts, or interacting with existing contracts. These operations consume computational resources, leading to a cost known as &amp;ldquo;Gas.&amp;rdquo; Users initiating transactions on Ethereum need to pay a fee for these computational resources in the form of Gas. Gas measures the amount of computational resources required to execute a transaction.</description>
    </item>
  </channel>
</rss>
